    server {
        listen 80;
        location / {
            default_type text/html;
            resolver 127.0.0.11;
            set $upstream_uri ''; # this line is required to create $my_var at config time
            access_by_lua_block{
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeouts(1000, 1000, 1000) -- 1 sec
                -- local ok, err = red:connect("127.0.0.1", 6379)
                -- or connect via hostname, need to specify resolver just like above
                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.say("failed to connect to redis: ", err)
                    return
                end
                local res, err = red:auth("password123")
                if not res then
                    ngx.say("failed to authenticate: ", err)
                    return
                end
                local res, err = red:get(ngx.var.arg_host)
                if not res then
                    ngx.log(ngx.ERR,"failed to get host: ", err)
                    return
                end

                 if res == ngx.null then
                     ngx.log(ngx.ERR,"dog not found.")
                     return
                 end
 --               ngx.say(ngx.var.arg_host)
                ngx.var.upstream_uri = res
                }
                # proxy_pass $upstream_uri;
                proxy_pass http://localhost/$upstream_uri;
        }
        location /testapi1 {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello, world 1</p>")
            }
        }
        location /testapi2 {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello, world 2</p>")
            }
        }
}
